// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: librpc.proto

#ifndef PROTOBUF_librpc_2eproto__INCLUDED
#define PROTOBUF_librpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_librpc_2eproto();
void protobuf_AssignDesc_librpc_2eproto();
void protobuf_ShutdownFile_librpc_2eproto();

class request;
class reply;

enum req_cmd {
  HELLO = 0,
  CALC = 1
};
bool req_cmd_IsValid(int value);
const req_cmd req_cmd_MIN = HELLO;
const req_cmd req_cmd_MAX = CALC;
const int req_cmd_ARRAYSIZE = req_cmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* req_cmd_descriptor();
inline const ::std::string& req_cmd_Name(req_cmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    req_cmd_descriptor(), value);
}
inline bool req_cmd_Parse(
    const ::std::string& name, req_cmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<req_cmd>(
    req_cmd_descriptor(), name, value);
}
enum rep_errno {
  SUCCESS = 0,
  ERROR = 1,
  NOEXIST = 2
};
bool rep_errno_IsValid(int value);
const rep_errno rep_errno_MIN = SUCCESS;
const rep_errno rep_errno_MAX = NOEXIST;
const int rep_errno_ARRAYSIZE = rep_errno_MAX + 1;

const ::google::protobuf::EnumDescriptor* rep_errno_descriptor();
inline const ::std::string& rep_errno_Name(rep_errno value) {
  return ::google::protobuf::internal::NameOfEnum(
    rep_errno_descriptor(), value);
}
inline bool rep_errno_Parse(
    const ::std::string& name, rep_errno* value) {
  return ::google::protobuf::internal::ParseNamedEnum<rep_errno>(
    rep_errno_descriptor(), name, value);
}
// ===================================================================

class request : public ::google::protobuf::Message {
 public:
  request();
  virtual ~request();

  request(const request& from);

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request& default_instance();

  void Swap(request* other);

  // implements Message ----------------------------------------------

  request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .req_cmd id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::req_cmd id() const;
  inline void set_id(::req_cmd value);

  // @@protoc_insertion_point(class_scope:request)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_librpc_2eproto();
  friend void protobuf_AssignDesc_librpc_2eproto();
  friend void protobuf_ShutdownFile_librpc_2eproto();

  void InitAsDefaultInstance();
  static request* default_instance_;
};
// -------------------------------------------------------------------

class reply : public ::google::protobuf::Message {
 public:
  reply();
  virtual ~reply();

  reply(const reply& from);

  inline reply& operator=(const reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reply& default_instance();

  void Swap(reply* other);

  // implements Message ----------------------------------------------

  reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reply& from);
  void MergeFrom(const reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rep_errno rpc_errno = 1;
  inline bool has_rpc_errno() const;
  inline void clear_rpc_errno();
  static const int kRpcErrnoFieldNumber = 1;
  inline ::rep_errno rpc_errno() const;
  inline void set_rpc_errno(::rep_errno value);

  // required bytes rpc_strerr = 2;
  inline bool has_rpc_strerr() const;
  inline void clear_rpc_strerr();
  static const int kRpcStrerrFieldNumber = 2;
  inline const ::std::string& rpc_strerr() const;
  inline void set_rpc_strerr(const ::std::string& value);
  inline void set_rpc_strerr(const char* value);
  inline void set_rpc_strerr(const void* value, size_t size);
  inline ::std::string* mutable_rpc_strerr();
  inline ::std::string* release_rpc_strerr();
  inline void set_allocated_rpc_strerr(::std::string* rpc_strerr);

  // @@protoc_insertion_point(class_scope:reply)
 private:
  inline void set_has_rpc_errno();
  inline void clear_has_rpc_errno();
  inline void set_has_rpc_strerr();
  inline void clear_has_rpc_strerr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rpc_strerr_;
  int rpc_errno_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_librpc_2eproto();
  friend void protobuf_AssignDesc_librpc_2eproto();
  friend void protobuf_ShutdownFile_librpc_2eproto();

  void InitAsDefaultInstance();
  static reply* default_instance_;
};
// ===================================================================


// ===================================================================

// request

// required .req_cmd id = 1;
inline bool request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::req_cmd request::id() const {
  return static_cast< ::req_cmd >(id_);
}
inline void request::set_id(::req_cmd value) {
  assert(::req_cmd_IsValid(value));
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// reply

// required .rep_errno rpc_errno = 1;
inline bool reply::has_rpc_errno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reply::set_has_rpc_errno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reply::clear_has_rpc_errno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reply::clear_rpc_errno() {
  rpc_errno_ = 0;
  clear_has_rpc_errno();
}
inline ::rep_errno reply::rpc_errno() const {
  return static_cast< ::rep_errno >(rpc_errno_);
}
inline void reply::set_rpc_errno(::rep_errno value) {
  assert(::rep_errno_IsValid(value));
  set_has_rpc_errno();
  rpc_errno_ = value;
}

// required bytes rpc_strerr = 2;
inline bool reply::has_rpc_strerr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reply::set_has_rpc_strerr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reply::clear_has_rpc_strerr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reply::clear_rpc_strerr() {
  if (rpc_strerr_ != &::google::protobuf::internal::kEmptyString) {
    rpc_strerr_->clear();
  }
  clear_has_rpc_strerr();
}
inline const ::std::string& reply::rpc_strerr() const {
  return *rpc_strerr_;
}
inline void reply::set_rpc_strerr(const ::std::string& value) {
  set_has_rpc_strerr();
  if (rpc_strerr_ == &::google::protobuf::internal::kEmptyString) {
    rpc_strerr_ = new ::std::string;
  }
  rpc_strerr_->assign(value);
}
inline void reply::set_rpc_strerr(const char* value) {
  set_has_rpc_strerr();
  if (rpc_strerr_ == &::google::protobuf::internal::kEmptyString) {
    rpc_strerr_ = new ::std::string;
  }
  rpc_strerr_->assign(value);
}
inline void reply::set_rpc_strerr(const void* value, size_t size) {
  set_has_rpc_strerr();
  if (rpc_strerr_ == &::google::protobuf::internal::kEmptyString) {
    rpc_strerr_ = new ::std::string;
  }
  rpc_strerr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* reply::mutable_rpc_strerr() {
  set_has_rpc_strerr();
  if (rpc_strerr_ == &::google::protobuf::internal::kEmptyString) {
    rpc_strerr_ = new ::std::string;
  }
  return rpc_strerr_;
}
inline ::std::string* reply::release_rpc_strerr() {
  clear_has_rpc_strerr();
  if (rpc_strerr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rpc_strerr_;
    rpc_strerr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void reply::set_allocated_rpc_strerr(::std::string* rpc_strerr) {
  if (rpc_strerr_ != &::google::protobuf::internal::kEmptyString) {
    delete rpc_strerr_;
  }
  if (rpc_strerr) {
    set_has_rpc_strerr();
    rpc_strerr_ = rpc_strerr;
  } else {
    clear_has_rpc_strerr();
    rpc_strerr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::req_cmd>() {
  return ::req_cmd_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rep_errno>() {
  return ::rep_errno_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_librpc_2eproto__INCLUDED
