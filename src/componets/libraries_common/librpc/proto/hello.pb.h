// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef PROTOBUF_hello_2eproto__INCLUDED
#define PROTOBUF_hello_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "librpc.pb.h"
// @@protoc_insertion_point(includes)

namespace hello {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hello_2eproto();
void protobuf_AssignDesc_hello_2eproto();
void protobuf_ShutdownFile_hello_2eproto();

class request;
class reply;

// ===================================================================

class request : public ::google::protobuf::Message {
 public:
  request();
  virtual ~request();

  request(const request& from);

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request& default_instance();

  void Swap(request* other);

  // implements Message ----------------------------------------------

  request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .req_cmd id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::req_cmd id() const;
  inline void set_id(::req_cmd value);

  // required uint32 uint32_arg = 2;
  inline bool has_uint32_arg() const;
  inline void clear_uint32_arg();
  static const int kUint32ArgFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_arg() const;
  inline void set_uint32_arg(::google::protobuf::uint32 value);

  // optional string string_arg = 3;
  inline bool has_string_arg() const;
  inline void clear_string_arg();
  static const int kStringArgFieldNumber = 3;
  inline const ::std::string& string_arg() const;
  inline void set_string_arg(const ::std::string& value);
  inline void set_string_arg(const char* value);
  inline void set_string_arg(const char* value, size_t size);
  inline ::std::string* mutable_string_arg();
  inline ::std::string* release_string_arg();
  inline void set_allocated_string_arg(::std::string* string_arg);

  // @@protoc_insertion_point(class_scope:hello.request)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uint32_arg();
  inline void clear_has_uint32_arg();
  inline void set_has_string_arg();
  inline void clear_has_string_arg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int id_;
  ::google::protobuf::uint32 uint32_arg_;
  ::std::string* string_arg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hello_2eproto();
  friend void protobuf_AssignDesc_hello_2eproto();
  friend void protobuf_ShutdownFile_hello_2eproto();

  void InitAsDefaultInstance();
  static request* default_instance_;
};
// -------------------------------------------------------------------

class reply : public ::google::protobuf::Message {
 public:
  reply();
  virtual ~reply();

  reply(const reply& from);

  inline reply& operator=(const reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const reply& default_instance();

  void Swap(reply* other);

  // implements Message ----------------------------------------------

  reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const reply& from);
  void MergeFrom(const reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rep_errno ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::rep_errno ret() const;
  inline void set_ret(::rep_errno value);

  // optional uint32 uint32_arg = 2;
  inline bool has_uint32_arg() const;
  inline void clear_uint32_arg();
  static const int kUint32ArgFieldNumber = 2;
  inline ::google::protobuf::uint32 uint32_arg() const;
  inline void set_uint32_arg(::google::protobuf::uint32 value);

  // optional string string_arg = 3;
  inline bool has_string_arg() const;
  inline void clear_string_arg();
  static const int kStringArgFieldNumber = 3;
  inline const ::std::string& string_arg() const;
  inline void set_string_arg(const ::std::string& value);
  inline void set_string_arg(const char* value);
  inline void set_string_arg(const char* value, size_t size);
  inline ::std::string* mutable_string_arg();
  inline ::std::string* release_string_arg();
  inline void set_allocated_string_arg(::std::string* string_arg);

  // @@protoc_insertion_point(class_scope:hello.reply)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_uint32_arg();
  inline void clear_has_uint32_arg();
  inline void set_has_string_arg();
  inline void clear_has_string_arg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int ret_;
  ::google::protobuf::uint32 uint32_arg_;
  ::std::string* string_arg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_hello_2eproto();
  friend void protobuf_AssignDesc_hello_2eproto();
  friend void protobuf_ShutdownFile_hello_2eproto();

  void InitAsDefaultInstance();
  static reply* default_instance_;
};
// ===================================================================


// ===================================================================

// request

// required .req_cmd id = 1;
inline bool request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::req_cmd request::id() const {
  return static_cast< ::req_cmd >(id_);
}
inline void request::set_id(::req_cmd value) {
  assert(::req_cmd_IsValid(value));
  set_has_id();
  id_ = value;
}

// required uint32 uint32_arg = 2;
inline bool request::has_uint32_arg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void request::set_has_uint32_arg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void request::clear_has_uint32_arg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void request::clear_uint32_arg() {
  uint32_arg_ = 0u;
  clear_has_uint32_arg();
}
inline ::google::protobuf::uint32 request::uint32_arg() const {
  return uint32_arg_;
}
inline void request::set_uint32_arg(::google::protobuf::uint32 value) {
  set_has_uint32_arg();
  uint32_arg_ = value;
}

// optional string string_arg = 3;
inline bool request::has_string_arg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void request::set_has_string_arg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void request::clear_has_string_arg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void request::clear_string_arg() {
  if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
    string_arg_->clear();
  }
  clear_has_string_arg();
}
inline const ::std::string& request::string_arg() const {
  return *string_arg_;
}
inline void request::set_string_arg(const ::std::string& value) {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  string_arg_->assign(value);
}
inline void request::set_string_arg(const char* value) {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  string_arg_->assign(value);
}
inline void request::set_string_arg(const char* value, size_t size) {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  string_arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request::mutable_string_arg() {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  return string_arg_;
}
inline ::std::string* request::release_string_arg() {
  clear_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_arg_;
    string_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void request::set_allocated_string_arg(::std::string* string_arg) {
  if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete string_arg_;
  }
  if (string_arg) {
    set_has_string_arg();
    string_arg_ = string_arg;
  } else {
    clear_has_string_arg();
    string_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// reply

// required .rep_errno ret = 1;
inline bool reply::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reply::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reply::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reply::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::rep_errno reply::ret() const {
  return static_cast< ::rep_errno >(ret_);
}
inline void reply::set_ret(::rep_errno value) {
  assert(::rep_errno_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional uint32 uint32_arg = 2;
inline bool reply::has_uint32_arg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void reply::set_has_uint32_arg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void reply::clear_has_uint32_arg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void reply::clear_uint32_arg() {
  uint32_arg_ = 0u;
  clear_has_uint32_arg();
}
inline ::google::protobuf::uint32 reply::uint32_arg() const {
  return uint32_arg_;
}
inline void reply::set_uint32_arg(::google::protobuf::uint32 value) {
  set_has_uint32_arg();
  uint32_arg_ = value;
}

// optional string string_arg = 3;
inline bool reply::has_string_arg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void reply::set_has_string_arg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void reply::clear_has_string_arg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void reply::clear_string_arg() {
  if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
    string_arg_->clear();
  }
  clear_has_string_arg();
}
inline const ::std::string& reply::string_arg() const {
  return *string_arg_;
}
inline void reply::set_string_arg(const ::std::string& value) {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  string_arg_->assign(value);
}
inline void reply::set_string_arg(const char* value) {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  string_arg_->assign(value);
}
inline void reply::set_string_arg(const char* value, size_t size) {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  string_arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* reply::mutable_string_arg() {
  set_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    string_arg_ = new ::std::string;
  }
  return string_arg_;
}
inline ::std::string* reply::release_string_arg() {
  clear_has_string_arg();
  if (string_arg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_arg_;
    string_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void reply::set_allocated_string_arg(::std::string* string_arg) {
  if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete string_arg_;
  }
  if (string_arg) {
    set_has_string_arg();
    string_arg_ = string_arg;
  } else {
    clear_has_string_arg();
    string_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hello_2eproto__INCLUDED
