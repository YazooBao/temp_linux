// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: librpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "librpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_reflection_ = NULL;
const ::google::protobuf::Descriptor* reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* req_cmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* rep_errno_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_librpc_2eproto() {
  protobuf_AddDesc_librpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "librpc.proto");
  GOOGLE_CHECK(file != NULL);
  request_descriptor_ = file->message_type(0);
  static const int request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, id_),
  };
  request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      request_descriptor_,
      request::default_instance_,
      request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(request));
  reply_descriptor_ = file->message_type(1);
  static const int reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, rpc_errno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, rpc_strerr_),
  };
  reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reply_descriptor_,
      reply::default_instance_,
      reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reply));
  req_cmd_descriptor_ = file->enum_type(0);
  rep_errno_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_librpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    request_descriptor_, &request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reply_descriptor_, &reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_librpc_2eproto() {
  delete request::default_instance_;
  delete request_reflection_;
  delete reply::default_instance_;
  delete reply_reflection_;
}

void protobuf_AddDesc_librpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014librpc.proto\"\037\n\007request\022\024\n\002id\030\001 \002(\0162\010."
    "req_cmd\":\n\005reply\022\035\n\trpc_errno\030\001 \002(\0162\n.re"
    "p_errno\022\022\n\nrpc_strerr\030\002 \002(\014*\036\n\007req_cmd\022\t"
    "\n\005HELLO\020\000\022\010\n\004CALC\020\001*0\n\trep_errno\022\013\n\007SUCC"
    "ESS\020\000\022\t\n\005ERROR\020\001\022\013\n\007NOEXIST\020\002", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "librpc.proto", &protobuf_RegisterTypes);
  request::default_instance_ = new request();
  reply::default_instance_ = new reply();
  request::default_instance_->InitAsDefaultInstance();
  reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_librpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_librpc_2eproto {
  StaticDescriptorInitializer_librpc_2eproto() {
    protobuf_AddDesc_librpc_2eproto();
  }
} static_descriptor_initializer_librpc_2eproto_;
const ::google::protobuf::EnumDescriptor* req_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_cmd_descriptor_;
}
bool req_cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* rep_errno_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rep_errno_descriptor_;
}
bool rep_errno_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int request::kIdFieldNumber;
#endif  // !_MSC_VER

request::request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void request::InitAsDefaultInstance() {
}

request::request(const request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

request::~request() {
  SharedDtor();
}

void request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_descriptor_;
}

const request& request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_librpc_2eproto();
  return *default_instance_;
}

request* request::default_instance_ = NULL;

request* request::New() const {
  return new request;
}

void request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .req_cmd id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::req_cmd_IsValid(value)) {
            set_id(static_cast< ::req_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .req_cmd id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .req_cmd id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .req_cmd id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request::MergeFrom(const request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request::CopyFrom(const request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void request::Swap(request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_descriptor_;
  metadata.reflection = request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reply::kRpcErrnoFieldNumber;
const int reply::kRpcStrerrFieldNumber;
#endif  // !_MSC_VER

reply::reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reply::InitAsDefaultInstance() {
}

reply::reply(const reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reply::SharedCtor() {
  _cached_size_ = 0;
  rpc_errno_ = 0;
  rpc_strerr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reply::~reply() {
  SharedDtor();
}

void reply::SharedDtor() {
  if (rpc_strerr_ != &::google::protobuf::internal::kEmptyString) {
    delete rpc_strerr_;
  }
  if (this != default_instance_) {
  }
}

void reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reply_descriptor_;
}

const reply& reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_librpc_2eproto();
  return *default_instance_;
}

reply* reply::default_instance_ = NULL;

reply* reply::New() const {
  return new reply;
}

void reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rpc_errno_ = 0;
    if (has_rpc_strerr()) {
      if (rpc_strerr_ != &::google::protobuf::internal::kEmptyString) {
        rpc_strerr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rep_errno rpc_errno = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rep_errno_IsValid(value)) {
            set_rpc_errno(static_cast< ::rep_errno >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rpc_strerr;
        break;
      }

      // required bytes rpc_strerr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpc_strerr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rpc_strerr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rep_errno rpc_errno = 1;
  if (has_rpc_errno()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rpc_errno(), output);
  }

  // required bytes rpc_strerr = 2;
  if (has_rpc_strerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->rpc_strerr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rep_errno rpc_errno = 1;
  if (has_rpc_errno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rpc_errno(), target);
  }

  // required bytes rpc_strerr = 2;
  if (has_rpc_strerr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rpc_strerr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rep_errno rpc_errno = 1;
    if (has_rpc_errno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpc_errno());
    }

    // required bytes rpc_strerr = 2;
    if (has_rpc_strerr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rpc_strerr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reply::MergeFrom(const reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rpc_errno()) {
      set_rpc_errno(from.rpc_errno());
    }
    if (from.has_rpc_strerr()) {
      set_rpc_strerr(from.rpc_strerr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reply::CopyFrom(const reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void reply::Swap(reply* other) {
  if (other != this) {
    std::swap(rpc_errno_, other->rpc_errno_);
    std::swap(rpc_strerr_, other->rpc_strerr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reply_descriptor_;
  metadata.reflection = reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
