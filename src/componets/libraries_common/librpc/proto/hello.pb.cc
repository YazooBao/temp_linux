// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hello.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hello {

namespace {

const ::google::protobuf::Descriptor* request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  request_reflection_ = NULL;
const ::google::protobuf::Descriptor* reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hello_2eproto() {
  protobuf_AddDesc_hello_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hello.proto");
  GOOGLE_CHECK(file != NULL);
  request_descriptor_ = file->message_type(0);
  static const int request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, uint32_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, string_arg_),
  };
  request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      request_descriptor_,
      request::default_instance_,
      request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(request));
  reply_descriptor_ = file->message_type(1);
  static const int reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, uint32_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, string_arg_),
  };
  reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      reply_descriptor_,
      reply::default_instance_,
      reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(reply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hello_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    request_descriptor_, &request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    reply_descriptor_, &reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hello_2eproto() {
  delete request::default_instance_;
  delete request_reflection_;
  delete reply::default_instance_;
  delete reply_reflection_;
}

void protobuf_AddDesc_hello_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_librpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013hello.proto\022\005hello\032\014librpc.proto\"G\n\007re"
    "quest\022\024\n\002id\030\001 \002(\0162\010.req_cmd\022\022\n\nuint32_ar"
    "g\030\002 \002(\r\022\022\n\nstring_arg\030\003 \001(\t\"H\n\005reply\022\027\n\003"
    "ret\030\001 \002(\0162\n.rep_errno\022\022\n\nuint32_arg\030\002 \001("
    "\r\022\022\n\nstring_arg\030\003 \001(\t", 181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hello.proto", &protobuf_RegisterTypes);
  request::default_instance_ = new request();
  reply::default_instance_ = new reply();
  request::default_instance_->InitAsDefaultInstance();
  reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hello_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hello_2eproto {
  StaticDescriptorInitializer_hello_2eproto() {
    protobuf_AddDesc_hello_2eproto();
  }
} static_descriptor_initializer_hello_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int request::kIdFieldNumber;
const int request::kUint32ArgFieldNumber;
const int request::kStringArgFieldNumber;
#endif  // !_MSC_VER

request::request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void request::InitAsDefaultInstance() {
}

request::request(const request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void request::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  uint32_arg_ = 0u;
  string_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

request::~request() {
  SharedDtor();
}

void request::SharedDtor() {
  if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete string_arg_;
  }
  if (this != default_instance_) {
  }
}

void request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return request_descriptor_;
}

const request& request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

request* request::default_instance_ = NULL;

request* request::New() const {
  return new request;
}

void request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    uint32_arg_ = 0u;
    if (has_string_arg()) {
      if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
        string_arg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .req_cmd id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::req_cmd_IsValid(value)) {
            set_id(static_cast< ::req_cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_arg;
        break;
      }

      // required uint32 uint32_arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_arg_)));
          set_has_uint32_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_arg;
        break;
      }

      // optional string string_arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_arg().data(), this->string_arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .req_cmd id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // required uint32 uint32_arg = 2;
  if (has_uint32_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_arg(), output);
  }

  // optional string string_arg = 3;
  if (has_string_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_arg().data(), this->string_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .req_cmd id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // required uint32 uint32_arg = 2;
  if (has_uint32_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_arg(), target);
  }

  // optional string string_arg = 3;
  if (has_string_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_arg().data(), this->string_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .req_cmd id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // required uint32 uint32_arg = 2;
    if (has_uint32_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_arg());
    }

    // optional string string_arg = 3;
    if (has_string_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void request::MergeFrom(const request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uint32_arg()) {
      set_uint32_arg(from.uint32_arg());
    }
    if (from.has_string_arg()) {
      set_string_arg(from.string_arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void request::CopyFrom(const request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void request::Swap(request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uint32_arg_, other->uint32_arg_);
    std::swap(string_arg_, other->string_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = request_descriptor_;
  metadata.reflection = request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int reply::kRetFieldNumber;
const int reply::kUint32ArgFieldNumber;
const int reply::kStringArgFieldNumber;
#endif  // !_MSC_VER

reply::reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void reply::InitAsDefaultInstance() {
}

reply::reply(const reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void reply::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  uint32_arg_ = 0u;
  string_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

reply::~reply() {
  SharedDtor();
}

void reply::SharedDtor() {
  if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete string_arg_;
  }
  if (this != default_instance_) {
  }
}

void reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return reply_descriptor_;
}

const reply& reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hello_2eproto();
  return *default_instance_;
}

reply* reply::default_instance_ = NULL;

reply* reply::New() const {
  return new reply;
}

void reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    uint32_arg_ = 0u;
    if (has_string_arg()) {
      if (string_arg_ != &::google::protobuf::internal::kEmptyString) {
        string_arg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rep_errno ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rep_errno_IsValid(value)) {
            set_ret(static_cast< ::rep_errno >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uint32_arg;
        break;
      }

      // optional uint32 uint32_arg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uint32_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uint32_arg_)));
          set_has_uint32_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_arg;
        break;
      }

      // optional string string_arg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_arg().data(), this->string_arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rep_errno ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional uint32 uint32_arg = 2;
  if (has_uint32_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uint32_arg(), output);
  }

  // optional string string_arg = 3;
  if (has_string_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_arg().data(), this->string_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rep_errno ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional uint32 uint32_arg = 2;
  if (has_uint32_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uint32_arg(), target);
  }

  // optional string string_arg = 3;
  if (has_string_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_arg().data(), this->string_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rep_errno ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint32 uint32_arg = 2;
    if (has_uint32_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uint32_arg());
    }

    // optional string string_arg = 3;
    if (has_string_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void reply::MergeFrom(const reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_uint32_arg()) {
      set_uint32_arg(from.uint32_arg());
    }
    if (from.has_string_arg()) {
      set_string_arg(from.string_arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void reply::CopyFrom(const reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void reply::Swap(reply* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(uint32_arg_, other->uint32_arg_);
    std::swap(string_arg_, other->string_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = reply_descriptor_;
  metadata.reflection = reply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

// @@protoc_insertion_point(global_scope)
